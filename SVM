import pandas as pd

import numpy as np

from matplotlib import pyplot as plt

import csv

from sklearn.model_selection import KFold
from sklearn import svm
from sklearn.metrics import classification_report

input_file = '/Users/Dessyb/Dropbox/Thesis_Final_Lap/final_compilation.csv' #name of the input file with the weather data

data = pd.read_csv(input_file)

pbl = data.dropna()

pbl = pbl.drop(columns=['year','month','day','hour','minute','date_time'])

features=["wind_speed","wind_direction","air_temperature","rel_humidity","air_pressure","u_comp","v_comp","zenith_angle","albedo","clear_sky_global_solar_radiation","z_ic"]

X = pbl[features]

Y = pbl['pollution_level']

kf = KFold(n_splits = 10, shuffle = True)

##kernel options linear, polynomial, sigmoid, radial basis function

c = svm.SVC(kernel='linear',gamma='auto',C=2)

for i in range(10):

    result = next(kf.split(X), None)

    x_train = X.iloc[result[0]]

    x_test = X.iloc[result[1]]

    y_train = Y.iloc[result[0]]

    y_test = Y.iloc[result[1]]

    SVM = c.fit(x_train,y_train)
        
    predictions = SVM.predict(x_test)

    filename = 'SVM_'+str(i)

    file = open(filename,"w")
    file.write(classification_report(y_test,predictions))
    file.close()

##print('Scores from each Iteration within the PBL: ', scores)
##
##print('Average K-Fold Score within the PBL:' , np.mean(scores))
##
##SIGNI = pd.DataFrame(signi)
##
##SIGNI.columns = features

##
##from sklearn import tree
##
##from sklearn.tree import DecisionTreeClassifier, export_graphviz
##
##from sklearn.model_selection import train_test_split
##
##from sklearn.model_selection import KFold
##
##from sklearn.metrics import accuracy_score
##
##
##import seaborn as sns
##
##import graphviz
##import pydotplus
##import io
##
##from scipy import misc
##
##from matplotlib.pyplot import imread
##

##
##def print_tree(tree,features,path):
##
##    f = io.StringIO()
##
##    export_graphviz(tree,out_file=f,feature_names=features)
##
##    pydotplus.graph_from_dot_data(f.getvalue()).write_png(path)
##
##    img = imread(path)
##
##    plt.rcParams["figure.figsize"]=(20,20)
##
##    plt.imshow(img)
##
##    plt.close()
##    

##
##pbl = pbl.drop(columns=['year','month','day','hour','minute','date_time'])
##
##features=["wind_speed","wind_direction","air_temperature","rel_humidity","air_pressure","u_comp","v_comp","zenith_angle","albedo","clear_sky_global_solar_radiation","z_ic"]
##
##X = pbl[features]
##
##Y = pbl['pollution_level']
##
##kf = KFold(n_splits = 10, shuffle = True)
##
##c = DecisionTreeClassifier(min_samples_split=8)
##
##scores = []
##
##signi = []
##
##for i in range(10):
##
##    temp = []
##
##    result = next(kf.split(X), None)
##
##    x_train = X.iloc[result[0]]
##
##    x_test = X.iloc[result[1]]
##
##    y_train = Y.iloc[result[0]]
##
##    y_test = Y.iloc[result[1]]
##
##    dt = c.fit(x_train,y_train)
##
##    importance = c.feature_importances_
##
##    for h,k in enumerate(importance):
##
##        temp.append(k)
##
##    signi.append(temp)
##        
##    predictions = dt.predict(x_test)
##
##    scores.append(dt.score(x_test,y_test))
##
##    filename ='decision_tree'+str(i+1)
##
##    print_tree(dt,features,filename)
##
##print('Scores from each Iteration within the PBL: ', scores)
##
##print('Average K-Fold Score within the PBL:' , np.mean(scores))
##
##SIGNI = pd.DataFrame(signi)
##
##SIGNI.columns = features
##
##SIGNI.to_csv('feature_importance.csv')
